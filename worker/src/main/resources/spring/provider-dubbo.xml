<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://code.alibabatech.com/schema/dubbo
                           http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                           http://www.springframework.org/schema/rabbit
			                http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
       default-autowire="byName" default-lazy-init="false">
    <context:annotation-config/>
    <context:component-scan base-package="cn.donut.ordermq"/>
    <bean class="com.koolearn.framework.common.utils.spring.SpringContextUtils"/>
    <tx:annotation-driven/>
    <bean id="connectionFactory" class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <property name="addresses" value="${rabbit.addresses}"/>
        <property name="username" value="${rabbit.username}"/>
        <property name="password" value="${rabbit.password}"/>
        <property name="virtualHost" value="${rabbit.vhost}"/>
    </bean>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="10"/>
        <property name="keepAliveSeconds" value ="300"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy"/>
        </property>
    </bean>

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener ref="orderPaySuccessReceiver" method="executor" queue-names="donut.order.pay.success" />
        <rabbit:listener queue-names="sharks.data.change-donut" ref="consumer"/>
        <!--<rabbit:listener queue-names="order.test" ref="consumer"/>-->
        <rabbit:listener queue-names="donut.order.create" ref="orderCreateReceiver" />
        <rabbit:listener queue-names="donut.order.cancel" ref="orderCancelReceiver" />
        <!--<rabbit:listener queue-names="donut.order.pay.success" ref="orderPaySuccessReceiver" />-->
        <rabbit:listener queue-names="donut.order.refund" ref="orderRefundReceiver" />
    </rabbit:listener-container>

    <!-- 消息接收者 -->
    <bean id="consumer" class="cn.donut.ordermq.worker.MsgReceiver">
        <property name="mqInformationServiceProvider" ref="mqInformationServiceProvider"/>
        <property name="mqAttachmentsServiceProvider" ref="mqAttachmentsServiceProvider"/>
        <property name="iUserProductService" ref="iUserProductService"/>
    </bean>

    <!-- 消息接收者 -->
    <bean id="orderCreateReceiver" class="cn.donut.ordermq.worker.order.OrderCreateReceiver"/>
    <bean id="orderCancelReceiver" class="cn.donut.ordermq.worker.order.OrderCancelReceiver"/>
    <bean id="orderPaySuccessReceiver" class="cn.donut.ordermq.worker.order.OrderPaySuccessReceiver"/>
    <bean id="orderRefundReceiver" class="cn.donut.ordermq.worker.order.OrderRefundReceiver"/>

    <dubbo:reference id="mqAttachmentsServiceProvider"
                     interface="cn.donut.ordermq.service.MqAttachmentsServiceProvider"/>

    <dubbo:reference id="mqInformationServiceProvider"
                     interface="cn.donut.ordermq.service.MqInformationServiceProvider"/>

    <!--产品变更mq-->
    <dubbo:reference id="iUserProductService" interface="com.koolearn.clazz.service.IUserProductService"/>

    <dubbo:reference id="mqRecordService"
                     interface="cn.donut.ordermq.service.MqRecordService"/>

    <dubbo:reference id="iOrderService" interface="cn.donut.ordermq.service.order.IOrderService"/>

    <dubbo:reference id="iOrderProductService" interface="cn.donut.ordermq.service.order.IOrderProductService"/>

    <!--订单状态消息变更MQ消息-->
    <dubbo:reference id="iOrderBasicInfoService" interface="com.koolearn.ordercenter.service.IOrderBasicInfoService"/>
    <!--加密解密-->
    <dubbo:reference id="msgEncryptionService" interface="cn.donut.retailm.service.common.MsgEncryptionService"/>
   <!--分销系统-->
    <dubbo:reference id="iRetailmOrderService" interface="cn.donut.retailm.service.order.IOrderService"/>
    <!--查询订单分销员信息-->
    <dubbo:reference id="iOrderDistributionInfoService"
                     interface="com.koolearn.ordercenter.service.IOrderDistributionInfoService"/>
    <!--查询订单分销员信息-->
    <dubbo:reference id="systemAllocationService"
                     interface="cn.donut.crm.service.SystemAllocationService"/>

    <!--查询客户信息-->
    <dubbo:reference id="OpenService"
                     interface="com.koolearn.sso.service.IOpenService"/>



</beans>
