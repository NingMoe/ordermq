<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.donut.ordermq.mapper.MqOrderPushMapper" >
    <resultMap id="BaseResultMap" type="cn.donut.ordermq.entity.MqOrderPush" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="productId" property="productid" jdbcType="INTEGER" />
        <result column="url" property="url" jdbcType="VARCHAR" />
        <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
        <result column="remark" property="remark" jdbcType="VARCHAR" />
        <result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
        <result column="update_at" property="updateAt" jdbcType="TIMESTAMP" />
    </resultMap>
    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List" >
    id, productId, url, is_delete, remark, create_at, update_at
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.donut.ordermq.entity.MqOrderPushExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
        from mq_order_push
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from mq_order_push
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mq_order_push
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.donut.ordermq.entity.MqOrderPushExample" >
        delete from mq_order_push
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="cn.donut.ordermq.entity.MqOrderPush" >
    insert into mq_order_push (id, productId, url,
      is_delete, remark, create_at,
      update_at)
    values (#{id,jdbcType=INTEGER}, #{productid,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR},
      #{isDelete,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP},
      #{updateAt,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="cn.donut.ordermq.entity.MqOrderPush" >
        insert into mq_order_push
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="productid != null" >
                productId,
            </if>
            <if test="url != null" >
                url,
            </if>
            <if test="isDelete != null" >
                is_delete,
            </if>
            <if test="remark != null" >
                remark,
            </if>
            <if test="createAt != null" >
                create_at,
            </if>
            <if test="updateAt != null" >
                update_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="productid != null" >
                #{productid,jdbcType=INTEGER},
            </if>
            <if test="url != null" >
                #{url,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null" >
                #{isDelete,jdbcType=INTEGER},
            </if>
            <if test="remark != null" >
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null" >
                #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updateAt != null" >
                #{updateAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.donut.ordermq.entity.MqOrderPushExample" resultType="java.lang.Integer" >
        select count(*) from mq_order_push
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
        update mq_order_push
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.productid != null" >
                productId = #{record.productid,jdbcType=INTEGER},
            </if>
            <if test="record.url != null" >
                url = #{record.url,jdbcType=VARCHAR},
            </if>
            <if test="record.isDelete != null" >
                is_delete = #{record.isDelete,jdbcType=INTEGER},
            </if>
            <if test="record.remark != null" >
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.createAt != null" >
                create_at = #{record.createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateAt != null" >
                update_at = #{record.updateAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update mq_order_push
        set id = #{record.id,jdbcType=INTEGER},
        productId = #{record.productid,jdbcType=INTEGER},
        url = #{record.url,jdbcType=VARCHAR},
        is_delete = #{record.isDelete,jdbcType=INTEGER},
        remark = #{record.remark,jdbcType=VARCHAR},
        create_at = #{record.createAt,jdbcType=TIMESTAMP},
        update_at = #{record.updateAt,jdbcType=TIMESTAMP}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.donut.ordermq.entity.MqOrderPush" >
        update mq_order_push
        <set >
            <if test="productid != null" >
                productId = #{productid,jdbcType=INTEGER},
            </if>
            <if test="url != null" >
                url = #{url,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null" >
                is_delete = #{isDelete,jdbcType=INTEGER},
            </if>
            <if test="remark != null" >
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null" >
                create_at = #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updateAt != null" >
                update_at = #{updateAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.donut.ordermq.entity.MqOrderPush" >
    update mq_order_push
    set productId = #{productid,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      update_at = #{updateAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="selectByProductId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from mq_order_push
        where productId = #{productId,jdbcType=INTEGER}
    </select>
    
</mapper>