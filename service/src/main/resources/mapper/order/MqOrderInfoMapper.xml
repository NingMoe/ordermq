<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.donut.ordermq.mapper.order.MqOrderInfoMapper" >
  <resultMap id="BaseResultMap" type="cn.donut.ordermq.entity.order.MqOrderInfo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="order_no" property="orderNo" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="campus_id" property="campusId" jdbcType="INTEGER" />
    <result column="agent_new_id" property="agentNewId" jdbcType="INTEGER" />
    <result column="agent_account_id" property="agentAccountId" jdbcType="INTEGER" />
    <result column="agent_account_version_id" property="agentAccountVersionId" jdbcType="INTEGER" />
    <result column="agent_ssoId" property="agentSsoid" jdbcType="VARCHAR" />
    <result column="partner_id" property="partnerId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="order_type" property="orderType" jdbcType="TINYINT" />
    <result column="order_source" property="orderSource" jdbcType="TINYINT" />
    <result column="order_time" property="orderTime" jdbcType="TIMESTAMP" />
    <result column="cancel_time" property="cancelTime" jdbcType="TIMESTAMP" />
    <result column="pay_time" property="payTime" jdbcType="TIMESTAMP" />
    <result column="original_price" property="originalPrice" jdbcType="DECIMAL" />
    <result column="original_price-net_value" property="originalPriceNetValue" jdbcType="DECIMAL" />
    <result column="strike_price" property="strikePrice" jdbcType="DECIMAL" />
    <result column="is_basic_order" property="isBasicOrder" jdbcType="TINYINT" />
    <result column="basic_order_id" property="basicOrderId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, order_no, user_id, campus_id, agent_new_id, agent_account_id, agent_account_version_id, 
    agent_ssoId, partner_id, status, order_type, order_source, order_time, cancel_time, 
    pay_time, original_price, original_price-net_value, strike_price, is_basic_order, 
    basic_order_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.donut.ordermq.entity.order.MqOrderInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mq_order_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mq_order_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mq_order_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.donut.ordermq.entity.order.MqOrderInfoExample" >
    delete from mq_order_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.donut.ordermq.entity.order.MqOrderInfo" >
    insert into mq_order_info (id, order_no, user_id, 
      campus_id, agent_new_id, agent_account_id, 
      agent_account_version_id, agent_ssoId, partner_id, 
      status, order_type, order_source, 
      order_time, cancel_time, pay_time, 
      original_price, original_price-net_value, strike_price, 
      is_basic_order, basic_order_id)
    values (#{id,jdbcType=INTEGER}, #{orderNo,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{campusId,jdbcType=INTEGER}, #{agentNewId,jdbcType=INTEGER}, #{agentAccountId,jdbcType=INTEGER}, 
      #{agentAccountVersionId,jdbcType=INTEGER}, #{agentSsoid,jdbcType=VARCHAR}, #{partnerId,jdbcType=INTEGER}, 
      #{status,jdbcType=TINYINT}, #{orderType,jdbcType=TINYINT}, #{orderSource,jdbcType=TINYINT}, 
      #{orderTime,jdbcType=TIMESTAMP}, #{cancelTime,jdbcType=TIMESTAMP}, #{payTime,jdbcType=TIMESTAMP}, 
      #{originalPrice,jdbcType=DECIMAL}, #{originalPriceNetValue,jdbcType=DECIMAL}, #{strikePrice,jdbcType=DECIMAL}, 
      #{isBasicOrder,jdbcType=TINYINT}, #{basicOrderId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.donut.ordermq.entity.order.MqOrderInfo" >
    insert into mq_order_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="campusId != null" >
        campus_id,
      </if>
      <if test="agentNewId != null" >
        agent_new_id,
      </if>
      <if test="agentAccountId != null" >
        agent_account_id,
      </if>
      <if test="agentAccountVersionId != null" >
        agent_account_version_id,
      </if>
      <if test="agentSsoid != null" >
        agent_ssoId,
      </if>
      <if test="partnerId != null" >
        partner_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="orderType != null" >
        order_type,
      </if>
      <if test="orderSource != null" >
        order_source,
      </if>
      <if test="orderTime != null" >
        order_time,
      </if>
      <if test="cancelTime != null" >
        cancel_time,
      </if>
      <if test="payTime != null" >
        pay_time,
      </if>
      <if test="originalPrice != null" >
        original_price,
      </if>
      <if test="originalPriceNetValue != null" >
        original_price-net_value,
      </if>
      <if test="strikePrice != null" >
        strike_price,
      </if>
      <if test="isBasicOrder != null" >
        is_basic_order,
      </if>
      <if test="basicOrderId != null" >
        basic_order_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null" >
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="campusId != null" >
        #{campusId,jdbcType=INTEGER},
      </if>
      <if test="agentNewId != null" >
        #{agentNewId,jdbcType=INTEGER},
      </if>
      <if test="agentAccountId != null" >
        #{agentAccountId,jdbcType=INTEGER},
      </if>
      <if test="agentAccountVersionId != null" >
        #{agentAccountVersionId,jdbcType=INTEGER},
      </if>
      <if test="agentSsoid != null" >
        #{agentSsoid,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null" >
        #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="orderType != null" >
        #{orderType,jdbcType=TINYINT},
      </if>
      <if test="orderSource != null" >
        #{orderSource,jdbcType=TINYINT},
      </if>
      <if test="orderTime != null" >
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="cancelTime != null" >
        #{cancelTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null" >
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="originalPrice != null" >
        #{originalPrice,jdbcType=DECIMAL},
      </if>
      <if test="originalPriceNetValue != null" >
        #{originalPriceNetValue,jdbcType=DECIMAL},
      </if>
      <if test="strikePrice != null" >
        #{strikePrice,jdbcType=DECIMAL},
      </if>
      <if test="isBasicOrder != null" >
        #{isBasicOrder,jdbcType=TINYINT},
      </if>
      <if test="basicOrderId != null" >
        #{basicOrderId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.donut.ordermq.entity.order.MqOrderInfoExample" resultType="java.lang.Integer" >
    select count(*) from mq_order_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update mq_order_info
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null" >
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.campusId != null" >
        campus_id = #{record.campusId,jdbcType=INTEGER},
      </if>
      <if test="record.agentNewId != null" >
        agent_new_id = #{record.agentNewId,jdbcType=INTEGER},
      </if>
      <if test="record.agentAccountId != null" >
        agent_account_id = #{record.agentAccountId,jdbcType=INTEGER},
      </if>
      <if test="record.agentAccountVersionId != null" >
        agent_account_version_id = #{record.agentAccountVersionId,jdbcType=INTEGER},
      </if>
      <if test="record.agentSsoid != null" >
        agent_ssoId = #{record.agentSsoid,jdbcType=VARCHAR},
      </if>
      <if test="record.partnerId != null" >
        partner_id = #{record.partnerId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.orderType != null" >
        order_type = #{record.orderType,jdbcType=TINYINT},
      </if>
      <if test="record.orderSource != null" >
        order_source = #{record.orderSource,jdbcType=TINYINT},
      </if>
      <if test="record.orderTime != null" >
        order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cancelTime != null" >
        cancel_time = #{record.cancelTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payTime != null" >
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.originalPrice != null" >
        original_price = #{record.originalPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.originalPriceNetValue != null" >
        original_price-net_value = #{record.originalPriceNetValue,jdbcType=DECIMAL},
      </if>
      <if test="record.strikePrice != null" >
        strike_price = #{record.strikePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.isBasicOrder != null" >
        is_basic_order = #{record.isBasicOrder,jdbcType=TINYINT},
      </if>
      <if test="record.basicOrderId != null" >
        basic_order_id = #{record.basicOrderId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update mq_order_info
    set id = #{record.id,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      campus_id = #{record.campusId,jdbcType=INTEGER},
      agent_new_id = #{record.agentNewId,jdbcType=INTEGER},
      agent_account_id = #{record.agentAccountId,jdbcType=INTEGER},
      agent_account_version_id = #{record.agentAccountVersionId,jdbcType=INTEGER},
      agent_ssoId = #{record.agentSsoid,jdbcType=VARCHAR},
      partner_id = #{record.partnerId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT},
      order_type = #{record.orderType,jdbcType=TINYINT},
      order_source = #{record.orderSource,jdbcType=TINYINT},
      order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      cancel_time = #{record.cancelTime,jdbcType=TIMESTAMP},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      original_price = #{record.originalPrice,jdbcType=DECIMAL},
      original_price-net_value = #{record.originalPriceNetValue,jdbcType=DECIMAL},
      strike_price = #{record.strikePrice,jdbcType=DECIMAL},
      is_basic_order = #{record.isBasicOrder,jdbcType=TINYINT},
      basic_order_id = #{record.basicOrderId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.donut.ordermq.entity.order.MqOrderInfo" >
    update mq_order_info
    <set >
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="campusId != null" >
        campus_id = #{campusId,jdbcType=INTEGER},
      </if>
      <if test="agentNewId != null" >
        agent_new_id = #{agentNewId,jdbcType=INTEGER},
      </if>
      <if test="agentAccountId != null" >
        agent_account_id = #{agentAccountId,jdbcType=INTEGER},
      </if>
      <if test="agentAccountVersionId != null" >
        agent_account_version_id = #{agentAccountVersionId,jdbcType=INTEGER},
      </if>
      <if test="agentSsoid != null" >
        agent_ssoId = #{agentSsoid,jdbcType=VARCHAR},
      </if>
      <if test="partnerId != null" >
        partner_id = #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="orderType != null" >
        order_type = #{orderType,jdbcType=TINYINT},
      </if>
      <if test="orderSource != null" >
        order_source = #{orderSource,jdbcType=TINYINT},
      </if>
      <if test="orderTime != null" >
        order_time = #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="cancelTime != null" >
        cancel_time = #{cancelTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null" >
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="originalPrice != null" >
        original_price = #{originalPrice,jdbcType=DECIMAL},
      </if>
      <if test="originalPriceNetValue != null" >
        original_price-net_value = #{originalPriceNetValue,jdbcType=DECIMAL},
      </if>
      <if test="strikePrice != null" >
        strike_price = #{strikePrice,jdbcType=DECIMAL},
      </if>
      <if test="isBasicOrder != null" >
        is_basic_order = #{isBasicOrder,jdbcType=TINYINT},
      </if>
      <if test="basicOrderId != null" >
        basic_order_id = #{basicOrderId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.donut.ordermq.entity.order.MqOrderInfo" >
    update mq_order_info
    set order_no = #{orderNo,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      campus_id = #{campusId,jdbcType=INTEGER},
      agent_new_id = #{agentNewId,jdbcType=INTEGER},
      agent_account_id = #{agentAccountId,jdbcType=INTEGER},
      agent_account_version_id = #{agentAccountVersionId,jdbcType=INTEGER},
      agent_ssoId = #{agentSsoid,jdbcType=VARCHAR},
      partner_id = #{partnerId,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      order_type = #{orderType,jdbcType=TINYINT},
      order_source = #{orderSource,jdbcType=TINYINT},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      cancel_time = #{cancelTime,jdbcType=TIMESTAMP},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      original_price = #{originalPrice,jdbcType=DECIMAL},
      original_price-net_value = #{originalPriceNetValue,jdbcType=DECIMAL},
      strike_price = #{strikePrice,jdbcType=DECIMAL},
      is_basic_order = #{isBasicOrder,jdbcType=TINYINT},
      basic_order_id = #{basicOrderId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>