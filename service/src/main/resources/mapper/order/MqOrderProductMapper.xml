<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.donut.ordermq.mapper.order.MqOrderProductMapper" >
  <resultMap id="BaseResultMap" type="cn.donut.ordermq.entity.order.MqOrderProduct" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="orderNo" property="orderno" jdbcType="VARCHAR" />
    <result column="productId" property="productid" jdbcType="INTEGER" />
    <result column="productName" property="productname" jdbcType="VARCHAR" />
    <result column="productLine" property="productline" jdbcType="INTEGER" />
    <result column="productType" property="producttype" jdbcType="INTEGER" />
    <result column="examSeasonId" property="examseasonid" jdbcType="INTEGER" />
    <result column="productStatus" property="productstatus" jdbcType="INTEGER" />
    <result column="isGiveProduct" property="isgiveproduct" jdbcType="INTEGER" />
    <result column="originalPrice" property="originalprice" jdbcType="DECIMAL" />
    <result column="originalPriceNetValue" property="originalpricenetvalue" jdbcType="DECIMAL" />
    <result column="strikePrice" property="strikeprice" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, orderNo, productId, productName, productLine, productType, examSeasonId, productStatus, 
    isGiveProduct, originalPrice, originalPriceNetValue, strikePrice
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.donut.ordermq.entity.order.MqOrderProductExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mq_order_product
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mq_order_product
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mq_order_product
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.donut.ordermq.entity.order.MqOrderProductExample" >
    delete from mq_order_product
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.donut.ordermq.entity.order.MqOrderProduct" >
    insert into mq_order_product (id, orderNo, productId, 
      productName, productLine, productType, 
      examSeasonId, productStatus, isGiveProduct, 
      originalPrice, originalPriceNetValue, strikePrice
      )
    values (#{id,jdbcType=INTEGER}, #{orderno,jdbcType=VARCHAR}, #{productid,jdbcType=INTEGER}, 
      #{productname,jdbcType=VARCHAR}, #{productline,jdbcType=INTEGER}, #{producttype,jdbcType=INTEGER}, 
      #{examseasonid,jdbcType=INTEGER}, #{productstatus,jdbcType=INTEGER}, #{isgiveproduct,jdbcType=INTEGER}, 
      #{originalprice,jdbcType=DECIMAL}, #{originalpricenetvalue,jdbcType=DECIMAL}, #{strikeprice,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.donut.ordermq.entity.order.MqOrderProduct" >
    insert into mq_order_product
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderno != null" >
        orderNo,
      </if>
      <if test="productid != null" >
        productId,
      </if>
      <if test="productname != null" >
        productName,
      </if>
      <if test="productline != null" >
        productLine,
      </if>
      <if test="producttype != null" >
        productType,
      </if>
      <if test="examseasonid != null" >
        examSeasonId,
      </if>
      <if test="productstatus != null" >
        productStatus,
      </if>
      <if test="isgiveproduct != null" >
        isGiveProduct,
      </if>
      <if test="originalprice != null" >
        originalPrice,
      </if>
      <if test="originalpricenetvalue != null" >
        originalPriceNetValue,
      </if>
      <if test="strikeprice != null" >
        strikePrice,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderno != null" >
        #{orderno,jdbcType=VARCHAR},
      </if>
      <if test="productid != null" >
        #{productid,jdbcType=INTEGER},
      </if>
      <if test="productname != null" >
        #{productname,jdbcType=VARCHAR},
      </if>
      <if test="productline != null" >
        #{productline,jdbcType=INTEGER},
      </if>
      <if test="producttype != null" >
        #{producttype,jdbcType=INTEGER},
      </if>
      <if test="examseasonid != null" >
        #{examseasonid,jdbcType=INTEGER},
      </if>
      <if test="productstatus != null" >
        #{productstatus,jdbcType=INTEGER},
      </if>
      <if test="isgiveproduct != null" >
        #{isgiveproduct,jdbcType=INTEGER},
      </if>
      <if test="originalprice != null" >
        #{originalprice,jdbcType=DECIMAL},
      </if>
      <if test="originalpricenetvalue != null" >
        #{originalpricenetvalue,jdbcType=DECIMAL},
      </if>
      <if test="strikeprice != null" >
        #{strikeprice,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.donut.ordermq.entity.order.MqOrderProductExample" resultType="java.lang.Integer" >
    select count(*) from mq_order_product
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update mq_order_product
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderno != null" >
        orderNo = #{record.orderno,jdbcType=VARCHAR},
      </if>
      <if test="record.productid != null" >
        productId = #{record.productid,jdbcType=INTEGER},
      </if>
      <if test="record.productname != null" >
        productName = #{record.productname,jdbcType=VARCHAR},
      </if>
      <if test="record.productline != null" >
        productLine = #{record.productline,jdbcType=INTEGER},
      </if>
      <if test="record.producttype != null" >
        productType = #{record.producttype,jdbcType=INTEGER},
      </if>
      <if test="record.examseasonid != null" >
        examSeasonId = #{record.examseasonid,jdbcType=INTEGER},
      </if>
      <if test="record.productstatus != null" >
        productStatus = #{record.productstatus,jdbcType=INTEGER},
      </if>
      <if test="record.isgiveproduct != null" >
        isGiveProduct = #{record.isgiveproduct,jdbcType=INTEGER},
      </if>
      <if test="record.originalprice != null" >
        originalPrice = #{record.originalprice,jdbcType=DECIMAL},
      </if>
      <if test="record.originalpricenetvalue != null" >
        originalPriceNetValue = #{record.originalpricenetvalue,jdbcType=DECIMAL},
      </if>
      <if test="record.strikeprice != null" >
        strikePrice = #{record.strikeprice,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update mq_order_product
    set id = #{record.id,jdbcType=INTEGER},
      orderNo = #{record.orderno,jdbcType=VARCHAR},
      productId = #{record.productid,jdbcType=INTEGER},
      productName = #{record.productname,jdbcType=VARCHAR},
      productLine = #{record.productline,jdbcType=INTEGER},
      productType = #{record.producttype,jdbcType=INTEGER},
      examSeasonId = #{record.examseasonid,jdbcType=INTEGER},
      productStatus = #{record.productstatus,jdbcType=INTEGER},
      isGiveProduct = #{record.isgiveproduct,jdbcType=INTEGER},
      originalPrice = #{record.originalprice,jdbcType=DECIMAL},
      originalPriceNetValue = #{record.originalpricenetvalue,jdbcType=DECIMAL},
      strikePrice = #{record.strikeprice,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.donut.ordermq.entity.order.MqOrderProduct" >
    update mq_order_product
    <set >
      <if test="orderno != null" >
        orderNo = #{orderno,jdbcType=VARCHAR},
      </if>
      <if test="productid != null" >
        productId = #{productid,jdbcType=INTEGER},
      </if>
      <if test="productname != null" >
        productName = #{productname,jdbcType=VARCHAR},
      </if>
      <if test="productline != null" >
        productLine = #{productline,jdbcType=INTEGER},
      </if>
      <if test="producttype != null" >
        productType = #{producttype,jdbcType=INTEGER},
      </if>
      <if test="examseasonid != null" >
        examSeasonId = #{examseasonid,jdbcType=INTEGER},
      </if>
      <if test="productstatus != null" >
        productStatus = #{productstatus,jdbcType=INTEGER},
      </if>
      <if test="isgiveproduct != null" >
        isGiveProduct = #{isgiveproduct,jdbcType=INTEGER},
      </if>
      <if test="originalprice != null" >
        originalPrice = #{originalprice,jdbcType=DECIMAL},
      </if>
      <if test="originalpricenetvalue != null" >
        originalPriceNetValue = #{originalpricenetvalue,jdbcType=DECIMAL},
      </if>
      <if test="strikeprice != null" >
        strikePrice = #{strikeprice,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.donut.ordermq.entity.order.MqOrderProduct" >
    update mq_order_product
    set orderNo = #{orderno,jdbcType=VARCHAR},
      productId = #{productid,jdbcType=INTEGER},
      productName = #{productname,jdbcType=VARCHAR},
      productLine = #{productline,jdbcType=INTEGER},
      productType = #{producttype,jdbcType=INTEGER},
      examSeasonId = #{examseasonid,jdbcType=INTEGER},
      productStatus = #{productstatus,jdbcType=INTEGER},
      isGiveProduct = #{isgiveproduct,jdbcType=INTEGER},
      originalPrice = #{originalprice,jdbcType=DECIMAL},
      originalPriceNetValue = #{originalpricenetvalue,jdbcType=DECIMAL},
      strikePrice = #{strikeprice,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>